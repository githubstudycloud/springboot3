version: '3.8'

services:
  # ======== 数据存储层 ========
  
  # 关系型数据库
  mysql:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-securepassword}
      MYSQL_DATABASE: platform
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init/mysql:/docker-entrypoint-initdb.d
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  # OLAP分析数据库 - 按需启用
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    restart: always
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
    profiles: ["analytics"]  # 使用profiles控制按需启动
      
  # NoSQL文档数据库
  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-securepassword}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
      
  # PostgreSQL 数据库 - 按需启用
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
    profiles: ["database"]  # 使用profiles控制按需启动
      
  # 缓存服务
  redis:
    image: redis:latest
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-securepassword} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - platform_net

  # ======== 消息与集成层 ========
  
  # 消息队列协调服务
  zookeeper:
    image: zookeeper:latest
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_MAX_CLIENT_CNXNS: 100
      ZOO_4LW_COMMANDS_WHITELIST: mntr,conf,ruok
      ZOO_TICK_TIME: 2000
      ZOO_INIT_LIMIT: 5
      ZOO_SYNC_LIMIT: 2
      ZOO_STANDALONE_ENABLED: "true"
      ZOO_AUTOPURGE_PURGEINTERVAL: 24
      ZOO_AUTOPURGE_SNAPRETAINCOUNT: 3
      # 最小JVM配置
      JVMFLAGS: "-Xmx128m -Xms64m"
    volumes:
      - zookeeper_data:/data
      - zookeeper_logs:/datalog
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - platform_net
  
  # 消息队列 - Kafka
  kafka:
    image: bitnami/kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      # 基础配置
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      # 性能优化
      KAFKA_CFG_NUM_PARTITIONS: 1
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_HEAP_OPTS: "-Xmx256m -Xms128m"
    volumes:
      - kafka_data:/bitnami/kafka
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
  
  # 消息队列 - RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    restart: always
    ports:
      - "5672:5672"  # AMQP端口
      - "15672:15672"  # 管理界面
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-securepassword}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net

  # ======== 服务治理层 ========
  
  # 服务注册与配置
  nacos:
    image: nacos/nacos-server:latest
    restart: always
    environment:
      MODE: standalone
      JVM_XMS: 128m
      JVM_XMX: 256m
      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: mysql
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_USER: root
      MYSQL_SERVICE_PASSWORD: ${MYSQL_ROOT_PASSWORD:-securepassword}
      MYSQL_SERVICE_DB_NAME: nacos
      NACOS_AUTH_ENABLE: "true"
      NACOS_AUTH_TOKEN_EXPIRE_SECONDS: "18000"
      NACOS_AUTH_TOKEN: "SecretKey012345678901234567890123456789012345678901234567890123456789"
    depends_on:
      - mysql
    ports:
      - "8848:8848"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
      
  # 服务网格与KV存储 - 按需启用
  consul:
    image: consul:latest
    restart: always
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0 -data-dir=/consul/data
    volumes:
      - consul_data:/consul/data
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - platform_net
    profiles: ["service-mesh"]  # 使用profiles控制按需启动

  # ======== 监控与日志层 ========
  
  # 搜索引擎
  elasticsearch:
    image: elasticsearch:latest
    restart: always
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
      
  # 日志收集
  logstash:
    image: logstash:latest
    restart: always
    depends_on:
      - elasticsearch
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms128m"
    volumes:
      - ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M
    networks:
      - platform_net
    profiles: ["logging"]  # 使用profiles控制按需启动
      
  # 日志可视化
  kibana:
    image: kibana:latest
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_BASEPATH: /kibana
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
      
  # 日志采集代理
  fluentd:
    image: fluent/fluentd:latest
    restart: always
    volumes:
      - ./config/fluentd:/fluentd/etc
      - ./logs:/fluentd/log
    environment:
      FLUENTD_CONF: fluentd.conf
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - platform_net
    profiles: ["logging"]  # 使用profiles控制按需启动

  # 监控系统
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
      
  # 监控可视化
  grafana:
    image: grafana/grafana:latest
    restart: always
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - platform_net

  # ======== 分布式追踪 ========
  
  # 分布式追踪 - Jaeger (按需启用)
  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
      SPAN_STORAGE_TYPE: memory  # 测试环境使用内存存储
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
    profiles: ["tracing"]  # 使用profiles控制按需启动
      
  # 分布式追踪 - Zipkin (按需启用)
  zipkin:
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"
    environment:
      STORAGE_TYPE: mem  # 测试环境使用内存存储
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
    profiles: ["tracing"]  # 使用profiles控制按需启动

  # ======== 接入层 ========
  
  # 反向代理/网关
  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html
      - ./logs/nginx:/var/log/nginx
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    networks:
      - platform_net
      
  # ======== 对象存储 ========
  
  # MinIO对象存储 - 按需启用
  minio:
    image: minio/minio:latest
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - platform_net
    profiles: ["storage"]  # 按需启动

networks:
  platform_net:
    driver: bridge

volumes:
  mysql_data:
  clickhouse_data:
  mongo_data:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  consul_data:
  minio_data:
