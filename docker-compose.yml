version: '3.8'

services:
  # =====================================
  # 基础设施层
  # =====================================
  
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: platform-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: platform_db
      MYSQL_USER: platform_user
      MYSQL_PASSWORD: platform_pass
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema:/docker-entrypoint-initdb.d
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-time-zone=+08:00
    networks:
      - platform-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: platform-redis
    restart: unless-stopped
    ports:
      - "6379:6379"  
    command: redis-server --appendonly yes --requirepass redispass
    volumes:
      - redis_data:/data
    networks:
      - platform-network
      
  # MongoDB 文档数据库
  mongodb:
    image: mongo:7
    container_name: platform-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: mongopass
      MONGO_INITDB_DATABASE: platform_mongo
    volumes:
      - mongodb_data:/data/db
    networks:
      - platform-network

  # =====================================
  # 注册中心与配置中心
  # =====================================
  
  # Nacos 注册中心
  nacos:
    image: nacos/nacos-server:v2.3.0
    container_name: platform-nacos
    restart: unless-stopped
    ports:
      - "8848:8848"
      - "9848:9848"
    environment:
      MODE: standalone
      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: mysql
      MYSQL_SERVICE_DB_NAME: nacos_config
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_USER: platform_user
      MYSQL_SERVICE_PASSWORD: platform_pass
      MYSQL_SERVICE_DB_PARAM: characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false&serverTimezone=Asia/Shanghai
    volumes:
      - nacos_data:/home/nacos/data
    depends_on:
      - mysql
    networks:
      - platform-network

  # =====================================
  # 消息队列
  # =====================================
  
  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: platform-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: rabbitpass
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - platform-network

  # Kafka 消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: platform-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - platform-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: platform-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - platform-network

  # =====================================
  # 监控与运维
  # =====================================
  
  # Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: platform-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - platform-network

  # Grafana 可视化
  grafana:
    image: grafana/grafana:10.1.0
    container_name: platform-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafanapass
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - platform-network

  # =====================================
  # 微服务应用
  # =====================================
  
  # Gateway 网关
  gateway:
    build:
      context: ./platform-gateway
      dockerfile: Dockerfile
    container_name: platform-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      NACOS_SERVER_ADDR: nacos:8848
      REDIS_HOST: redis
      REDIS_PASSWORD: redispass
    depends_on:
      - nacos
      - redis
    volumes:
      - gateway_logs:/app/logs
    networks:
      - platform-network

  # 数据采集服务 - 系统A
  collect-system-a:
    build:
      context: ./platform-business/platform-business-collect/collect-system-a
      dockerfile: Dockerfile
    container_name: platform-collect-system-a
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      NACOS_SERVER_ADDR: nacos:8848
      MYSQL_HOST: mysql
      MYSQL_DATABASE: platform_db
      MYSQL_USER: platform_user
      MYSQL_PASSWORD: platform_pass
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: rabbitpass
    depends_on:
      - nacos
      - mysql
      - rabbitmq
    volumes:
      - collect_logs:/app/logs
    networks:
      - platform-network

  # 数据处理服务
  process-service:
    build:
      context: ./platform-business/platform-business-process
      dockerfile: Dockerfile
    container_name: platform-process-service
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      NACOS_SERVER_ADDR: nacos:8848
      MYSQL_HOST: mysql
      MONGODB_HOST: mongodb
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - nacos
      - mysql
      - mongodb
      - redis
      - kafka
    volumes:
      - process_logs:/app/logs
    networks:
      - platform-network

  # Vue 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: platform-frontend
    restart: unless-stopped
    ports:
      - "8090:80"
    networks:
      - platform-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
      - frontend
    networks:
      - platform-network

  # =====================================
  # 开发工具 (dev profile)
  # =====================================
  
  # Adminer 数据库管理工具
  adminer:
    image: adminer
    container_name: platform-adminer
    restart: unless-stopped
    ports:
      - "8085:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
    networks:
      - platform-network
    profiles:
      - dev

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: platform-redis-commander
    restart: unless-stopped
    ports:
      - "8086:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redispass
    depends_on:
      - redis
    networks:
      - platform-network
    profiles:
      - dev

volumes:
  mysql_data:
  redis_data:
  mongodb_data:
  nacos_data:
  rabbitmq_data:
  zookeeper_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  gateway_logs:
  collect_logs:
  process_logs:

networks:
  platform-network:
    driver: bridge 